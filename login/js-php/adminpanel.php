<?phpdate_default_timezone_set('America/New_York');include_once($_SERVER['DOCUMENT_ROOT']."/vendor/autoload.php");/* Core API */include_once($_SERVER['DOCUMENT_ROOT'] . "/login/js-php/core.php");/* Robux Handler */include_once($_SERVER['DOCUMENT_ROOT']."/autobuy/RobuxHandler.php");/* New Card DB System Handler */include_once ($_SERVER['DOCUMENT_ROOT'] . "/login/trelloapi/submission_handler.php");/* Suspension System */require_once('Suspension_System.php');/* Sales DB System Handler */include_once($_SERVER['DOCUMENT_ROOT'] . "/login/js-php/Sales_Handler.php");/* SirHurt Key DB System Handler */include_once($_SERVER['DOCUMENT_ROOT'] . "/login/js-php/KeyHandler.php");/* Rank Titles */require_once('RankTitles.php');/* Referral System */require_once('Referral_System.php');/* Referral System */require_once('LogHandler.php');/* Subscription System */require_once('subscription.php');/* Security System */require_once('SecurityHandler.php');/* Partner System */require_once('PartnerHandler.php');/* Ticket DB System Handler */require_once('TicketHandler.php');$identifier = "";if (isset($_POST['type'])){    $type = ($_POST['type']);}if (isset($_POST['identifier'])){    $identifier = strip_tags(trim($_POST['identifier']));}if (isset($_GET['specialkeyoverride'])){    if (isset($_GET['type']))    {        $type = $_GET['type'];    }    if (isset($_GET['identifier']))    {        $identifier = trim($_GET['identifier']);    }    if (isset($_GET['level']))    {        $level = $_GET['level'];    }}function sha256_hash($str){    return hash('sha256', $str);}function BlowFishDecryptionManual($part2, $key, $iv){    return openssl_decrypt(base64_decode($part2) , 'BF-CFB', $key, true, $iv);}function BlowFishEncryptionManual($part2, $key, $iv){    return base64_encode(openssl_encrypt($part2, 'BF-CFB', $key, true, $iv));}function get_string_between($string, $start, $end){    $string = ' ' . $string;    $ini = strpos($string, $start);    if ($ini == 0) return '';    $ini += strlen($start);    $len = strpos($string, $end, $ini) - $ini;    return substr($string, $ini, $len);}function postToDiscord($message, $webhook, $webhookname){    $data = array("content" => $message, "username" => $webhookname);    $curl = curl_init($webhook);    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, "POST");    curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));        curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type: application/json', 'Connection: Keep-Alive' ));        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);    return curl_exec($curl);}function GetIP() {    if(getenv('HTTP_CF_CONNECTING_IP'))         $_SERVER['REMOTE_ADDR'] = preg_replace('/^([^,]*).*$/', '$1', getenv('HTTP_CF_CONNECTING_IP'));    return $_SERVER['REMOTE_ADDR'];}//define("CLEARANCE_LEVEL", 0);/*if (GetIP() != "71.226.117.100"){    exit();}*/define("HEAD_OF_OPERATIONS", 10);define("VICE_HEAD_OF_OPERATIONS", 8);define("SALES_REPRESENTATIVE", 7);define("SECRETARY", 6);define("UPPER_MANAGEMENT", 5);define("DEVELOPER", 4);define("ADMIN", 3);define("SUPERVISOR", 2);define("MODERATOR", 1);define("HELPER", 0.4);define("FORMER_STAFF", 0.3);define("YOUTUBE_PARTNER", 0.2);define("BETA_TESTER", 0.1);$abuse_webhook = "https://discord.com/api/webhooks/835761023234867261/epmYGDOuUypB6c5TDRjBDMne-U_lky8ddiOgDYBH07YEe-cu-QUERQoIq8UkuCdznAUQ";$clearance_level = 0;$userseccookie = "N/A";$secusername = "N/A";$secdata = array(); //$parts[16]function Censor_Output($message, $default = 2){        $length = strlen($message);    $censor_length = round($length / $default);    $compile_xxx = "";        for ($x = 0; $x < $censor_length; $x++)    {        $compile_xxx = $compile_xxx . "-";    }        $new = substr($message, 0, -$censor_length) . $compile_xxx;        return $new;}function Emergency_Staff_Log($username, $clearance, $command, $identifier){    $management_webhook = "https://discord.com/api/webhooks/835761456124395540/bdxZ21oZAiFfSu9-pi-wZqHvjc9BsaRwKXx0Dt05p56Ievlfgi4MxtAXMP4m7o0nTShL";    $staff_is_on_watch_list = false;        /* Staff Watch List */    $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $findusername = $NewDB->query("SELECT * FROM `StaffWatchListDB` WHERE `username` LIKE '$username'");    if (count($findusername->fetch_assoc()) > 0)     {        $management_webhook = "https://discord.com/api/webhooks/835761375321391146/U6pcaaU9e3M3lPzKlYt2FrCNoAxZHwo8NkMFRz0a6BpqFBfG8bvZAbruSNYHe4p8QdOC";        $staff_is_on_watch_list = true;    }        $NewDB->close();    /* End Staff Watch List */        $compile_message = "";        if ($staff_is_on_watch_list == false)    {        $compile_message = "Staff member " . Censor_Output($username, 3) . " of clearance level " . $clearance . " executed command " . $command . " with identifier " . Censor_Output($identifier);    }    else    {        $compile_message = "@everyone Staff member " . $username . " of clearance level " . $clearance . " executed command " . $command . " with identifier " . $identifier;    }        postToDiscord($compile_message, $management_webhook, "Detective Chimp");}function Times_Executed_Command($usernam, $cmd){    $logdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        $dateDB = getnow();    $executions = 0;    $loop_staff_db = mysqli_query($logdbconn, "SELECT * FROM `StaffLogDB` WHERE `date` LIKE '$dateDB'") or die(mysqli_error($logdbconn));    while ($entry = mysqli_fetch_array($loop_staff_db))    {        if (($entry['username'] == $usernam || ($entry['ip'] == GetIP() && $entry['ip'] != "REDACTED")) && ($entry['command'] == $cmd) && strlen($entry['date']) > 4)        {            $executions++;        }    }        $logdbconn->close();        return $executions;}function Times_Executed_Today($usernam){    $logdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        $dateDB = getnow();    $executions = 0;    $loop_staff_db = mysqli_query($logdbconn, "SELECT * FROM `StaffLogDB` WHERE `date` LIKE '%$dateDB%'") or die(mysqli_error($logdbconn));    while ($entry = mysqli_fetch_array($loop_staff_db))    {        if ($entry['username'] == $usernam || ($entry['ip'] == GetIP() && $entry['ip'] != "REDACTED"))        {            $executions++;        }    }        $logdbconn->close();        return $executions;}function Is_Current_Staff_Blacklisted($whitelist){    $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $findusername = $NewDB->query("SELECT * FROM `BlacklistedPromotions`");    while ($blacklisted_db = mysqli_fetch_array($findusername))    {        if ($whitelist["username"] == $blacklisted_db["username"] || $whitelist["email"] == $blacklisted_db["email"] || ($whitelist["ip"] == $blacklisted_db["ip"] || GetIP() == $blacklisted_db["ip"]) || ($whitelist["hwid"] == $blacklisted_db["hwid"] && $blacklisted_db['hwid'] != "NONE"))            {                return true;            }    }        return false;}function LogStaffEvent($usrl, $ip, $operationtype, $importantidentifier){    $keydb = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        $dateDB = getnow();        if (CLEARANCE_LEVEL < SALES_REPRESENTATIVE)    {        $sql = "INSERT INTO StaffLogDB (date, username, ip, command, identifier)        VALUES ('$dateDB', '$usrl', '$ip', '$operationtype', '$importantidentifier')";    }    else    {        $sql = "INSERT INTO StaffLogDB (date, username, ip, command, identifier)        VALUES ('$dateDB', '$usrl', 'REDACTED', '$operationtype', '$importantidentifier')";    }            /* Due to recent raids, let's introduce a new way of monitoring. */    Emergency_Staff_Log($usrl, CLEARANCE_LEVEL, $operationtype, $importantidentifier);    return $keydb->query($sql);}function FetchUsernameFromUsageLogs($identifier, $identifiertype){    $foundusername = "N/A";        $logdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        if($clientlogstmt = $logdbconn->prepare("SELECT USERNAME, DATE, IP, HWID, COMPUTERNAME, WINDOWTITLE, TIMEZONE FROM LogDB WHERE " . $identifiertype . " = ?")) {        $clientlogstmt->bind_param("s", $identifier);         $clientlogstmt->execute();         $clientlogstmt->bind_result($usern_cl, $date_cl, $ip_cl, $hwid_cl, $computername_cl, $windowtitle_cl, $timezone_cl);            while ($clientlogstmt->fetch())         {            $foundusername = $usern_cl;            break;        }    }        $logdbconn->close();        return $foundusername;}function Fetch_Identifiers_Alt_Check($identif, $type, $all_identifiers = false){    $times = 0;    $array_of_identifiers = array(array(), array());        $keydbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        if($stmt = $keydbconn->prepare("SELECT authkey, hwid, email, username, pass, whitelistkey, ip, discord, date, expire, flagged, hwidlock, lastreset, flagreason, cookiesec, oldpwd, accesslevel, mac_hwid, mac_whitelistkey, mac_expire, cookiesec_expires, securitypin FROM UserDB WHERE $type = ?"))         {            $stmt->bind_param("s", $identif);             $stmt->execute();             $stmt->bind_result($authkey_db, $hwid_db, $email, $usern, $pass_db, $whitelistkey, $ip_db, $discord, $date, $expire, $flagged, $hwidlock, $lastreset, $flagreason, $cookiesec, $oldpwd, $accesslevel, $mac_hwid, $mac_whitelistkey, $mac_expire, $cookiesec_expires, $securitypin);            while ($stmt->fetch())             {                if ($all_identifiers == true)                {                    return array(array($usern, $hwid_db, $ip_db, $email, $accesslevel, $date, $discord), array($accesslevel));                }                                $array_of_identifiers[0][$times] = $usern;                $array_of_identifiers[1][$times] = $accesslevel;                $times++;            }        }                $keydbconn->close();        $stmt->close();                return $array_of_identifiers;}function AddStaffBlacklist($idenf){    $userdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $loop = mysqli_query($userdbconn, "SELECT * FROM UserDB");    while ($whitelist = mysqli_fetch_array($loop))    {            if ($idenf == $whitelist["username"] || $idenf == $whitelist["email"] || $idenf == $whitelist["discord"] || $idenf == $whitelist["whitelistkey"] || $idenf == $whitelist["authkey"])            {                $usrdb = $whitelist["username"];                $eye_pea = GetIP();                $hwid_user = $whitelist["hwid"];                $email_user = $whitelist["email"];                $reason_of_blacklist = "Automatic Abuse Entry";                                $sql = "INSERT INTO BlacklistedPromotions (username, hwid, ip, email, reason)                VALUES ('$usrdb', '$hwid_user', '$eye_pea', '$email_user', '$reason_of_blacklist')";                            $keyDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);                if ($keyDB->query($sql) == true)                {                    return true;                }                else                {                    return false;                }            }    }}function AddStaffWatchList($idenf){    $userdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $loop = mysqli_query($userdbconn, "SELECT * FROM UserDB");    while ($whitelist = mysqli_fetch_array($loop))    {            if ($idenf == $whitelist["username"] || $idenf == $whitelist["email"] || $idenf == $whitelist["discord"] || $idenf == $whitelist["whitelistkey"] || $idenf == $whitelist["authkey"])            {                if ($whitelist["accesslevel"] < 1)                {                    return false;                }                                $usrdb = $whitelist["username"];                $email_user = $whitelist["email"];                $sql = "INSERT INTO StaffWatchListDB (username, email)                VALUES ('$usrdb', '$email_user')";                            $keyDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);                if ($keyDB->query($sql) == true)                {                    return true;                }                else                {                    return false;                }            }    }}if (!isset($_GET['specialkeyoverride'])){        if (isset($_COOKIE["_ASSHURTSECURITY"]))        {                        if (!isset($_COOKIE["_ASSHURTSTAFFTOKEN"]))            {                header("Location: logout.php");                die();            }                        $secusername = BlowFishDecryptionManual($_COOKIE["_ASSHURTSECURITY"], COOKIE_ENC_KEY, COOKIE_ENC_IV); //decrypt cookie to get username            $cookiesec_cookie = BlowFishDecryptionManual($_COOKIE["_ASSHURTSECTOKEN"], COOKIE_ENC_KEY, COOKIE_ENC_IV); //decrypt cookie to get cookiesec            $cookiesec_staff_cookie = BlowFishDecryptionManual($_COOKIE["_ASSHURTSTAFFTOKEN"], STAFF_COOKIE_ENC_KEY, STAFF_COOKIE_ENC_IV); //decrypt cookie to get cookiesec            $userseccookie = $cookiesec_cookie;                        $userdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);                        $cookiesec_cookie = strip_tags($userdbconn->real_escape_string($cookiesec_cookie));            $secusername = strip_tags($userdbconn->real_escape_string($secusername));            $cookiesec_staff_cookie = strip_tags($userdbconn->real_escape_string($cookiesec_staff_cookie));                        $loop = mysqli_query($userdbconn, "SELECT * FROM UserDB");            while ($whitelist = mysqli_fetch_array($loop))            {                if ($secusername == $whitelist["username"])                {                    $clearance_level = $whitelist['accesslevel'];                    define("CLEARANCE_LEVEL", $whitelist['accesslevel']);                                        $secdata = $whitelist;                    if ($whitelist['cookiesec'] != $cookiesec_cookie || $whitelist['cookiesec'] != $cookiesec_staff_cookie )                    {                        header("Location: logout.php");                        die();                    }                                        if (Is_Cookie_Expired($secusername) == "EXPIRED")                    {                        header("Location: logout.php");                        die();                    }                }            }        }        else        {            header("Location: https://www.sirhurt.net/login/login.html");            die();        }}else{     if ($_GET['specialkeyoverride'] != "JKS8934534534DSJHAG123HS")     {         echo "Security Check Failed.";         exit();     }}use Trello\Client;use Trello\Manager;use \Selly as Selly;Selly\Client::authenticate("ashpokeman@gmail.com", SELLY_API_KEY);$servername = "localhost";$username = AERO_DB_USERNAME;$dbname = AERO_DB;$conn = new mysqli($servername, $username, AERO_DB_PASSWORD, $dbname);$loop = mysqli_query($conn, "SELECT * FROM UserDB") or die(mysqli_error($conn));/* SQL Injection = Gay */$identifier = strip_tags($conn->real_escape_string($identifier));$type = strip_tags($conn->real_escape_string($type));//fetch the resultsfunction generateRandomString($n){    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';    $randomString = '';    for ($i = 0;$i < $n;$i++)    {        $index = rand(0, strlen($characters) - 1);        $randomString .= $characters[$index];    }    return $randomString;}/* Let's limit this to 50 staff actions per day. seems fair? Even the most active staff shouldn't exceed 50 panel logs a day. */if (Times_Executed_Today($secusername) >= 50){    if ($clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);                    $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {            $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for exceeding the daily max of command executions.";            postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";            $myObj->param = "Hey there! We've detected some suspicious activity coming from your account, and as such, have automatically revolked your clearance level for security. Please contact a member of UM.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }                $myObj->status = "bad";        $myObj->param = "We aren't able to perform this action.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }}/* Check if current account is in the Blacklisted Staff DB Possible Alt */if (Is_Current_Staff_Blacklisted($secdata)){    if ($clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);                    $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {            $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for being in the blacklisted staff database.";            postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";            $myObj->param = "Hey there! We've detected some suspicious activity coming from your account, and as such, have automatically revolked your clearance level for security. Please contact a member of UM.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }}/* Check if staff member has a security pin in place. 12-10-2020 */if (strlen($secdata["securitypin"]) < 10 || $secdata["securitypin"] == "NONE" || preg_match('/\b2021-\b/', $secdata["securitypin"])){    if ($clearance_level >= MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "Hey there staff member! It looks like you currently don't have a 'Security Pin' active on your account. A security pin is required for your clearance in order to use this panel. Setup a security pin by going to the 'Account' tab, then going to 'Security' then chosing a desired pin. Thanks!";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }}if ($type == "add_account_sharing_exclusion"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);    if (HasUserTriggeredDetection($identifier) == false)    {        $myObj->status = "bad";        $myObj->param = "This user has not been added on watch as a potential account sharer.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $pcnames = fetchDifferentIdentifiers($identifier)[0];    $compiled_pcnames = "";        for ($x = 0; $x < sizeof($pcnames); $x++)     {         $compiled_pcnames = $compiled_pcnames . $pcnames[$x] . ", ";    }        if (strlen($compiled_pcnames) < 3)    {        $myObj->status = "bad";        $myObj->param = "Some odd error occured while attempting to gather information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $compiled_pcnames = substr($compiled_pcnames, 0, -2);        if (UpdateExclusionInformation($identifier, $compiled_pcnames))    {        DeleteDetectionEntry($identifier);                $myObj->status = "good";        $myObj->param = "Added exclusion for user " . $identifier;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to add exclusion for " . $identifier;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $myObj->status = "bad";    $myObj->param = "An error occured while trying to add exclusion for " . $identifier;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "verifyEmail"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (strlen($identifier) < 2)    {        $myObj->status = "bad";        $myObj->param = "Looks like somebody forgot to provide details.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $account_email = "NONE";    $account_username = "NONE";        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $account_email = $whitelist["email"];            $account_username = $whitelist["username"];            break;        }    }        if ($account_username != "NONE")    {        $goodemaildbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        $loop_emaildb = mysqli_query($goodemaildbconn, "SELECT * FROM GoodEmailDB");        while ($emailgoodlist = mysqli_fetch_array($loop_emaildb))        {            if ($emailgoodlist['email'] == $account_email && $emailgoodlist['username'] == $account_username)            {                $myObj->status = "bad";                $myObj->param = "This account is already verified.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }                $keydb_ = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);                    $sql = "INSERT INTO GoodEmailDB (username, email)        VALUES ('$account_username', '$account_email')";                if ($keydb_->query($sql))        {            $myObj->status = "good";            $myObj->param = "Successfully verified email.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }        else        {            $myObj->status = "bad";            $myObj->param = "An unknown error occured while trying to verify this account.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        $myObj->status = "bad";    $myObj->param = "Unable to find whitelist information.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "resetpass"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (Times_Executed_Command($secusername, $type) >= 5)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $parts = $whitelist;            $unsalted = generateRandomString(20);            $newcookietoken = generateRandomString(20);            $expires_on = adddaystodate(getnow(), 30);            //$pass_new = md5($unsalted . "78hsdSJH#$%");            $pwd_salt = substr($unsalted, 0, 2);            $rand_salt = md5($unsalted . "_6g{m#UhG+2nuNx" . $pwd_salt);            //$pass_new = sha256_hash($unsalted . $rand_salt); //md5($pass . $md5seed);            $pass_new = password_hash($unsalted . $rand_salt, PASSWORD_ARGON2ID);                        $org_pass = $whitelist["pass"];                        if ($whitelist["accesslevel"] >= $clearance_level)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset this accounts password. Invalid clearance";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }            $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', email = ' . "'$parts[2]'" . ", username = " . "'$parts[3]'" . ", pass = " . "'$pass_new'" . ", whitelistkey = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", discord = " . "'$parts[7]'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'" . ", hwidlock = " . "'$parts[11]'" . ", lastreset = " . "'$parts[12]'" . ", flagreason = " . "'$parts[13]'" . ", cookiesec = " . "'$newcookietoken'" . ", oldpwd = " . "'$parts[15]'" . ", accesslevel = " . "'$parts[16]'" . ", mac_hwid = " . "'$parts[17]'" . ", mac_whitelistkey = " . "'$parts[18]'" . ", mac_expire = " . "'$parts[19]'" . ", cookiesec_expires = " . "'$expires_on'" . ", securitypin = " . "'$parts[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$parts[3]'";            if ($conn->query($sql) == false)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset account password.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "good";                $myObj->param = $unsalted;                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }            /* Legacy Database Password Reset */        $conn_olddb = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        $loop_olddb = mysqli_query($conn_olddb, "SELECT * FROM Whitelist") or die (mysqli_error($conn_olddb));        $saltedwlkey = md5($identifier . "Y9@GHT7#cZ&Y");                while ($old_database = mysqli_fetch_array($loop_olddb))         {            if ($identifier == $old_database["discord"] || $saltedwlkey == $old_database["pass"] || $identifier == $old_database["whitelistkey"] || $identifier == $old_database["authkey"])            {                $parts = $old_database;                $unsalted = generateRandomString(6);                $pass_new = md5($unsalted . "Y9@GHT7#cZ&Y");                $org_pass = $old_database["pass"];                $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', pass = ' . "'$pass_new'" . ", number = " . "'$parts[3]'" . ", whitelistkey = " . "'$parts[4]'" . ", discord = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", secret = " . "'$parts[7]'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'";                $sql = "UPDATE Whitelist SET $data WHERE pass = '$org_pass'";                                if ($conn_olddb->query($sql) === FALSE)                 {                    $myObj->status = "bad";                    $myObj->param = "Unable to change legacy whitelist information.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                else                {                    $myObj->status = "good";                    $myObj->param = "Reset Legacy Password: $unsalted";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }            }        }            $myObj->status = "bad";        $myObj->param = "Unable to find whitelist information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();}if ($type == "resetsecuritypin"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (Times_Executed_Command($secusername, $type) >= 5)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $parts = $whitelist;            $newcookietoken = generateRandomString(20);            $expires_on = adddaystodate(getnow(), 30);                        if ($whitelist["accesslevel"] >= $clearance_level)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset this accounts security pin. Invalid clearance";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }            $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', email = ' . "'$parts[2]'" . ", username = " . "'$parts[3]'" . ", pass = " . "'$parts[4]'" . ", whitelistkey = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", discord = " . "'$parts[7]'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'" . ", hwidlock = " . "'$parts[11]'" . ", lastreset = " . "'$parts[12]'" . ", flagreason = " . "'$parts[13]'" . ", cookiesec = " . "'$newcookietoken'" . ", oldpwd = " . "'$parts[15]'" . ", accesslevel = " . "'$parts[16]'" . ", mac_hwid = " . "'$parts[17]'" . ", mac_whitelistkey = " . "'$parts[18]'" . ", mac_expire = " . "'$parts[19]'" . ", cookiesec_expires = " . "'$expires_on'" . ", securitypin = " . "'NONE'";            $sql = "UPDATE UserDB SET $data WHERE username = '$parts[3]'";            if ($conn->query($sql) == false)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset account security pin.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "good";                $myObj->param = "Account's security pin has been reset.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }            $myObj->status = "bad";        $myObj->param = "Unable to find whitelist information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();}if ($type == "removeBlacklistedPromotion"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $findusername = $NewDB->query("SELECT * FROM `BlacklistedPromotions`");    while ($blacklisted_db = mysqli_fetch_array($findusername))    {        if ($identifier == $blacklisted_db["username"] || ($identifier == $blacklisted_db["hwid"] && $blacklisted_db['hwid'] != "NONE"))        {            $blacklisted_username = $blacklisted_db["username"];            $sql = "DELETE FROM BlacklistedPromotions WHERE username = '$blacklisted_username'";                        if ($NewDB->query($sql))            {                $myObj->status = "good";                $myObj->param = "Deleted Staff Blacklist.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();                }                                    $myObj->status = "bad";            $myObj->param = "Unable to delete blacklisted account.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();            }    }        $NewDB->close();        $myObj->status = "bad";    $myObj->param = "Unable to delete blacklisted account. Blacklist not found.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();    }if ($type == "removeStaffWatchList"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $findusername = $NewDB->query("SELECT * FROM `StaffWatchListDB`");    while ($blacklisted_db = mysqli_fetch_array($findusername))    {        if ($identifier == $blacklisted_db["username"] || $identifier == $blacklisted_db["email"])        {            $blacklisted_username = $blacklisted_db["username"];            $sql = "DELETE FROM StaffWatchListDB WHERE username = '$blacklisted_username'";                        if ($NewDB->query($sql))            {                $myObj->status = "good";                $myObj->param = "Deleted Staff Watchlist Entry.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();                }                                    $myObj->status = "bad";            $myObj->param = "Unable to delete staff watchlist entry.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();            }    }        $NewDB->close();        $myObj->status = "bad";    $myObj->param = "Unable to delete blacklisted account. Blacklist not found.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();    }if ($type == "addStaffWatchList"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (AddStaffWatchList($identifier))    {        $myObj->status = "good";        $myObj->param = "Added Staff Member to Watchlist.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "A error occured while trying to add this member to the watchlist.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }}if ($type == "addBlacklistedPromotion"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    $findusername = $NewDB->query("SELECT * FROM `BlacklistedPromotions`");    while ($blacklisted_db = mysqli_fetch_array($findusername))    {        if ($identifier == $blacklisted_db["username"] || ($identifier == $blacklisted_db["hwid"] && $blacklisted_db['hwid'] != "NONE"))        {            $myObj->status = "bad";            $myObj->param = "Unable to blacklist account. Account is already blacklisted.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();            }    }        $NewDB->close();    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            if ($whitelist["accesslevel"] >= $clearance_level)            {                AddStaffBlacklist($secusername);                                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to staff blacklist account with same clearance level of higher. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                $myObj->status = "bad";                $myObj->param = "Unable to blacklist account. Invalid clearance";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }                        $usrdb = $whitelist["username"];            $eye_pea = $whitelist["ip"];            $hwid_user = $whitelist["hwid"];            $email_user = $whitelist["email"];            $reason_of_blacklist = urldecode($_POST['reason']);                        $sql = "INSERT INTO BlacklistedPromotions (username, hwid, ip, email, reason)            VALUES ('$usrdb', '$hwid_user', '$eye_pea', '$email_user', '$reason_of_blacklist')";                    $keyDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);            if ($keyDB->query($sql) == true)            {                $myObj->status = "good";                $myObj->param = "Blacklisted Staff Member";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "bad";                $myObj->param = "An unknown issue occured.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }        $myObj->status = "bad";    $myObj->param = "Unable to find whitelist information.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "resetemail"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 6)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $parts = $whitelist;            $newemail = strip_tags(trim($_POST['email']));            $newcookietoken = generateRandomString(20);            $expires_on = adddaystodate(getnow(), 30);            if ($whitelist["accesslevel"] >= $clearance_level)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset this accounts email. Invalid clearance";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }            $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', email = ' . "'$newemail'" . ", username = " . "'$parts[3]'" . ", pass = " . "'$parts[4]'" . ", whitelistkey = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", discord = " . "'$parts[7]'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'" . ", hwidlock = " . "'$parts[11]'" . ", lastreset = " . "'$parts[12]'" . ", flagreason = " . "'$parts[13]'" . ", cookiesec = " . "'$newcookietoken'" . ", oldpwd = " . "'$parts[15]'" . ", accesslevel = " . "'$parts[16]'" . ", mac_hwid = " . "'$parts[17]'" . ", mac_whitelistkey = " . "'$parts[18]'" . ", mac_expire = " . "'$parts[19]'" . ", cookiesec_expires = " . "'$expires_on'" . ", securitypin = " . "'$parts[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$parts[3]'";            if ($conn->query($sql) == false)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset account email.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "good";                $myObj->param = "Changed email for account " . $parts[3];                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }            $myObj->status = "bad";        $myObj->param = "Unable to find whitelist information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();}if ($type == "changeusername"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 4)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        $newusername = strip_tags(trim($_POST['newusername']));    LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $newusername);    $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        if (strlen($newusername) > 20)    {        $myObj->status = "bad";        $myObj->param = "Usernames cannot be longer than 20 characters.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (preg_match('/\s/',$newusername)){        $myObj->status = "bad";        $myObj->param = "Usernames cannot contain white spaces.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (strlen($newusername) < 3){        $myObj->status = "bad";        $myObj->param = "Usernames must at least 3 characters long.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (!preg_match("/^[A-Za-z0-9]+$/i", $newusername)){        $myObj->status = "bad";        $myObj->param = "Usernames cannot contain special characters.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();           }        $findusername = $NewDB->query("SELECT * FROM `UserDB` WHERE `username` LIKE '$newusername'");    if (count($findusername->fetch_assoc()) > 0) {        $myObj->status = "bad";        $myObj->param  = "Username is already taken.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $parts = $whitelist;            $newcookietoken = generateRandomString(20);            $expires_on = adddaystodate(getnow(), 30);            if ($whitelist["accesslevel"] >= $clearance_level)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset this accounts username. Invalid clearance";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }            $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', email = ' . "'$parts[2]'" . ", username = " . "'$newusername'" . ", pass = " . "'$parts[4]'" . ", whitelistkey = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", discord = " . "'$parts[7]'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'" . ", hwidlock = " . "'$parts[11]'" . ", lastreset = " . "'$parts[12]'" . ", flagreason = " . "'$parts[13]'" . ", cookiesec = " . "'$newcookietoken'" . ", oldpwd = " . "'$parts[15]'" . ", accesslevel = " . "'$parts[16]'" . ", mac_hwid = " . "'$parts[17]'" . ", mac_whitelistkey = " . "'$parts[18]'" . ", mac_expire = " . "'$parts[19]'" . ", cookiesec_expires = " . "'$expires_on'" . ", securitypin = " . "'$parts[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$parts[3]'";            if ($conn->query($sql) == false)            {                $myObj->status = "bad";                $myObj->param = "Unable to reset accounts username.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "good";                $myObj->param = "Successfully changed username for account " . $parts[3];                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }            $myObj->status = "bad";        $myObj->param = "Unable to find whitelist information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();}if ($type == "liftdiscordlock"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 6 && $clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();        }    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $parts = $whitelist;            $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', email = ' . "'$parts[2]'" . ", username = " . "'$parts[3]'" . ", pass = " . "'$parts[4]'" . ", whitelistkey = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", discord = " . "'NoDiscord'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'" . ", hwidlock = " . "'$parts[11]'" . ", lastreset = " . "'$parts[12]'" . ", flagreason = " . "'$parts[13]'" . ", cookiesec = " . "'$parts[14]'" . ", oldpwd = " . "'$parts[15]'" . ", accesslevel = " . "'$parts[16]'" . ", mac_hwid = " . "'$parts[17]'" . ", mac_whitelistkey = " . "'$parts[18]'" . ", mac_expire = " . "'$parts[19]'" . ", cookiesec_expires = " . "'$parts[20]'" . ", securitypin = " . "'$parts[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$parts[3]'";            if ($conn->query($sql) == false)            {                $myObj->status = "bad";                $myObj->param = "Unable to unlock account's attached discord.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "good";                $myObj->param = "Successfully removed attached discord from account " . $identifier . ".";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }            $myObj->status = "bad";        $myObj->param = "Unable to find whitelist information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();}if ($type == "manualsetdiscord"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 12 && $clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $newdiscordid = "NoDiscord";    if (is_numeric(trim($_POST['discordid'])))    {        $newdiscordid = trim($_POST['discordid']);    }    else    {        $myObj->status = "bad";        $myObj->param = "Invalid Discord ID.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $parts = $whitelist;                        if ($whitelist["accesslevel"] >= $clearance_level)            {                $myObj->status = "bad";                $myObj->param = "Cannot modify same level or superiors attached discord id.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            $data = 'authkey = ' . "'$parts[0]'" . ', hwid = ' . "'$parts[1]'" . ', email = ' . "'$parts[2]'" . ", username = " . "'$parts[3]'" . ", pass = " . "'$parts[4]'" . ", whitelistkey = " . "'$parts[5]'" . ", ip = " . "'$parts[6]'" . ", discord = " . "'$newdiscordid'" . ", date = " . "'$parts[8]'" . ", expire = " . "'$parts[9]'" . ", flagged = " . "'$parts[10]'" . ", hwidlock = " . "'$parts[11]'" . ", lastreset = " . "'$parts[12]'" . ", flagreason = " . "'$parts[13]'" . ", cookiesec = " . "'$parts[14]'" . ", oldpwd = " . "'$parts[15]'" . ", accesslevel = " . "'$parts[16]'" . ", mac_hwid = " . "'$parts[17]'" . ", mac_whitelistkey = " . "'$parts[18]'" . ", mac_expire = " . "'$parts[19]'" . ", cookiesec_expires = " . "'$parts[20]'" . ", securitypin = " . "'$parts[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$parts[3]'";            if ($conn->query($sql) == false)            {                $myObj->status = "bad";                $myObj->param = "Unable to set account's attached discord id.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }            else            {                $myObj->status = "good";                $myObj->param = "Successfully attached discord to account " . $identifier . ".";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }        }    }            $myObj->status = "bad";        $myObj->param = "Unable to find whitelist information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();}if ($type == "removePartnerAdHistory"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (strlen($identifier) < 3)    {        $myObj->status = "bad";        $myObj->param = "Incorrect Usage of " . $type;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();     }        $userdbconn = new mysqli("localhost", PARTNER_DB_USERNAME, PARTNER_DB_PASSWORD, PARTNER_DB);    $identifier = $userdbconn->real_escape_string(strip_tags(trim($identifier)));        $conn_partnerdb = new mysqli("localhost", PARTNER_DB_USERNAME, PARTNER_DB_PASSWORD, PARTNER_DB);        $findusername = $userdbconn->query("SELECT * FROM `PartnerAdsDB` WHERE `PARTNER_USERNAME` LIKE '$identifier'");    if (count($findusername->fetch_assoc()) > 0)    {        $sql = "DELETE FROM PartnerAdsDB WHERE PARTNER_USERNAME = '$identifier'";        if ($conn_partnerdb->query($sql) == true)        {            $myObj->status = "good";            $myObj->param = "Successfully deleted account.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }        else        {            $myObj->status = "bad";            $myObj->param = "Unable to delete partner ad history for partner " . $identifier;            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();         }    }        $myObj->status = "bad";    $myObj->param = "Unable to delete partner ad history for partner " . $identifier;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit(); }if ($type == "remove"){    if ($clearance_level < DEVELOPER)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (Times_Executed_Command($secusername, $type) >= 4)    {        if ($clearance_level < HEAD_OF_OPERATIONS)        {            AddStaffBlacklist($secusername);                        $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";            if ($conn->query($sql) == true)            {                    $demotion_reason = "Exceeding daily execution limit for this command.";                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                            $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();            }        }    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {                        if ($whitelist["accesslevel"] >= $clearance_level)            {                AddStaffBlacklist($secusername);                                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to delete account with same clearance level of higher. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                $myObj->status = "bad";                $myObj->param = "Unable to delete account. Invalid clearance";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }                        $username = $whitelist["username"];            $sql = "DELETE FROM UserDB WHERE username = '$username'";            $conn->query($sql);            $myObj->status = "good";            $myObj->param = "Successfully deleted account.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Unable to delete account.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "deleteStaffGeneratedRobuxKeys"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (ClearStaffGeneratedRobuxKeys())    {        $myObj->status = "good";        $myObj->param = "Deleted all unredeemed Staff-Made ROBUX Keys";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to remove all staff-made robux serials.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }}if ($type == "deleteStaffGeneratedSirHurtKeys"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (ClearStaffGeneratedSirHurtKeys())    {        $myObj->status = "good";        $myObj->param = "Deleted all unredeemed Staff-Made SirHurt Keys";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to remove all staff-made SirHurt serials.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }}if ($type == "removewhitelistserial"){    if ($clearance_level < ADMIN)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (strlen($identifier) < 3)    {        $myObj->status = "bad";        $myObj->param = "Unable to delete serial key. Key to short.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        /*$keyDB = mysqli_query($userdbconn, "SELECT * FROM KeyDB");    while ($whitelist = mysqli_fetch_array($keyDB))    {        if ($identifier == $whitelist["serialkey"])        {            $serialk = $whitelist["serialkey"];            $sql = "DELETE FROM KeyDB WHERE serialkey = '$serialk'";            $conn->query($sql);            $myObj->status = "good";            $myObj->param = "Successfully deleted serial key.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }*/        if (Delete_SirHurt_Key($identifier) == true)    {        $myObj->status = "good";        $myObj->param = "Successfully deleted serial key.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $myObj->status = "bad";    $myObj->param = "Unable to delete serial key.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "liftemailban"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $keyDB = mysqli_query($userdbconn, "SELECT * FROM BadEmailDB");    while ($whitelist = mysqli_fetch_array($keyDB))    {        if ($identifier == $whitelist["email"])        {            $sql = "DELETE FROM BadEmailDB WHERE email = '$identifier'";            $conn->query($sql);            $myObj->status = "good";            $myObj->param = "Successfully lifted email address ban on " . $identifier . ".";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Unable to lift email address ban. No banned email found under " . $identifier . ".";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "removerobuxserial"){    if ($clearance_level < ADMIN)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (!CheckKeyValid($identifier))    {        $myObj->status = "bad";        $myObj->param = "Unable to delete ROBUX Serial Key: Serial Key is non existant.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $returno = DeleteSerialKey($identifier);        if ($returno == true)    {        $myObj->status = "good";        $myObj->param = "Successfully deleted ROBUX Serial Key";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $myObj->status = "bad";    $myObj->param = "Failed to delete ROBUX Serial Key.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "flagrobuxkey"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $key_info = FetchKeyInformation($identifier);        if ($key_info[0] == "FAILED")    {        $myObj->status = "bad";        $myObj->param = "Serial key is not valid.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $reason = "N/A";    if (isset($_POST['reason']))    {        $reason = urldecode($_POST['reason']);    }        if (UpdateSerialKey($key_info[0], $key_info[1], "TRUE", $reason, $secusername) == true)    {        $myObj->status = "good";        $myObj->param = "Robux key has been suspended successfully.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to suspend this key.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $myObj->status = "bad";    $myObj->param = "Serial key is invalid.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "unflagrobuxkey"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $key_info = FetchKeyInformation($identifier);        if ($key_info[0] == "FAILED")    {        $myObj->status = "bad";        $myObj->param = "Serial key is not valid.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $reason = "N/A";    if (isset($_POST['reason']))    {        $reason = urldecode($_POST['reason']);    }        if (UpdateSerialKey($key_info[0], $key_info[1], "FALSE", "NONE", "NONE") == true)    {        $myObj->status = "good";        $myObj->param = "Robux key has been unsuspended successfully.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to unsuspend this key.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $myObj->status = "bad";    $myObj->param = "Serial key is invalid.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "flagwhitelistkey"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }            $key_info = Fetch_SirHurt_Key_Information($identifier);        if ($key_info[0] == "NONE")    {        $myObj->status = "bad";        $myObj->param = "Serial key is not valid.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $reason = "N/A";    if (isset($_POST['reason']))    {        $reason = urldecode($_POST['reason']);    }            if (Update_SirHurt_Key($key_info[0], $key_info[1], $key_info[2], $key_info[3], "TRUE", $reason, $secusername) == true)    {        $myObj->status = "good";        $myObj->param = "Serial key has been suspended successfully.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to suspend this key.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $myObj->status = "bad";    $myObj->param = "Serial key is invalid.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "unflagwhitelistkey"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }            $key_info = Fetch_SirHurt_Key_Information($identifier);        if ($key_info[0] == "NONE")    {        $myObj->status = "bad";        $myObj->param = "Serial key is not valid.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (Update_SirHurt_Key($key_info[0], $key_info[1], $key_info[2], $key_info[3], "FALSE", "NONE", "NONE") == true)    {        $myObj->status = "good";        $myObj->param = "Serial key has been unsuspended successfully.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    else    {        $myObj->status = "bad";        $myObj->param = "An error occured while trying to unsuspend this key.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $myObj->status = "bad";    $myObj->param = "Serial key is invalid.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "flag"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 5 && $clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();        }    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $reason = "N/A";            if (isset($_POST['reason']))            {                $reason = urldecode($_POST['reason']);            }                        $reason = str_replace("'","", $reason);                        if ($whitelist["accesslevel"] >= $clearance_level)            {                AddStaffBlacklist($secusername);                                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to suspend account with same clearance level of higher. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                $myObj->status = "bad";                $myObj->param = "Unable to flag this account. Invalid clearance.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();             }                        $daysfor = 0;            $carry_over = 0; //0 = Account Blacklist, 1 = HWID Blacklist                        if (isset($_POST['daysfor']))            {                $daysfor = $_POST['daysfor'];            }                        if ($daysfor == -1)            {                $daysfor = 0;                $carry_over = 1;            }                        //if ($whitelist["whitelistkey"] != "NONE")            addSuspension($whitelist["username"], $whitelist['hwid'], $daysfor, $carry_over, $secusername);            $username = $whitelist['username'];            //$sql = "UPDATE Whitelist SET authkey = '$whitelist[0]', hwid = '$whitelist[1]', pass = '$whitelist[2]', number = '$whitelist[3]', whitelistkey = '$whitelist[4]', discord = '$whitelist[5]', ip = '$whitelist[6]', secret = '$whitelist[7]', date = '$whitelist[8]', expire = '$whitelist[9]', flagged = 'TRUE' WHERE authkey = '$whitelist[0]'";            $sql = 'UPDATE UserDB SET authkey = ' . "'$whitelist[0]'" . ', hwid = ' . "'$whitelist[1]'" . ', email = ' . "'$whitelist[2]'" . ", username = " . "'$whitelist[3]'" . ", pass = " . "'$whitelist[4]'" . ", whitelistkey = " . "'$whitelist[5]'" . ", ip = " . "'$whitelist[6]'" . ", discord = " . "'$whitelist[7]'" . ", date = " . "'$whitelist[8]'" . ", expire = " . "'$whitelist[9]'" . ", flagged = " . "'TRUE'" . ", hwidlock = " . "'$whitelist[11]'" . ", lastreset = " . "'$whitelist[12]'" . ", flagreason = " . "'$reason'" . ", cookiesec = " . "'$whitelist[14]'" . ", oldpwd = " . "'$whitelist[15]'" . ", accesslevel = " . "'$whitelist[16]'" . ", mac_hwid = " . "'$whitelist[17]'" . ", mac_whitelistkey = " . "'$whitelist[18]'" . ", mac_expire = " . "'$whitelist[19]'" . ", cookiesec_expires = " . "'$whitelist[20]'" . ", securitypin = " . "'$whitelist[21]'" . " WHERE username = '$username'";            if (!$conn->query($sql))            {                $myObj->status = "bad";                $myObj->param = "An error occured while trying to suspend this account.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }                        LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $daysfor . ":" . $reason);                                    /* Email User out of curtosy */            $expires_on = "Never";                        if ($daysfor > 0)            {                $expires_on = adddaystodate(getnow(), $daysfor);            }                        file_get_contents("https://www.sirhurt.net/login/emailapi/suspension.php?sec=SDHKJSHDKJSGDJKS&betken=" . urlencode(BlowFishEncryptionManual($whitelist["email"], "C?B(G+KbPcAhV2Yq3t6B9ycB&E)H@McQ", "z%C*F-JaCdREAjXn")) . "&moderator=" . $secusername . "&reason=" . urlencode($reason) . "&expires=" . urlencode($expires_on));            /* End Courtisy Email */            $myObj->status = "good";            $myObj->param = "Successfully flagged account.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Failed to flag account.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "unflag"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            if ($whitelist[1] != "NONE")            removeSuspension($whitelist["username"], $whitelist[1]);                        $username = $whitelist['username'];            //$sql = "UPDATE Whitelist SET authkey = '$whitelist[0]', hwid = '$whitelist[1]', pass = '$whitelist[2]', number = '$whitelist[3]', whitelistkey = '$whitelist[4]', discord = '$whitelist[5]', ip = '$whitelist[6]', secret = '$whitelist[7]', date = '$whitelist[8]', expire = '$whitelist[9]', flagged = 'TRUE' WHERE authkey = '$whitelist[0]'";            $sql = 'UPDATE UserDB SET authkey = ' . "'$whitelist[0]'" . ', hwid = ' . "'$whitelist[1]'" . ', email = ' . "'$whitelist[2]'" . ", username = " . "'$whitelist[3]'" . ", pass = " . "'$whitelist[4]'" . ", whitelistkey = " . "'$whitelist[5]'" . ", ip = " . "'$whitelist[6]'" . ", discord = " . "'$whitelist[7]'" . ", date = " . "'$whitelist[8]'" . ", expire = " . "'$whitelist[9]'" . ", flagged = " . "'FALSE'" . ", hwidlock = " . "'$whitelist[11]'" . ", lastreset = " . "'$whitelist[12]'" . ", flagreason = " . "'NONE'" . ", cookiesec = " . "'$whitelist[14]'" . ", oldpwd = " . "'$whitelist[15]'" . ", accesslevel = " . "'$whitelist[16]'" . ", mac_hwid = " . "'$whitelist[17]'" . ", mac_whitelistkey = " . "'$whitelist[18]'" . ", mac_expire = " . "'$whitelist[19]'" . ", cookiesec_expires = " . "'$whitelist[20]'" . ", securitypin = " . "'$whitelist[21]'" . " WHERE username = '$username'";            $conn->query($sql);                        LogStaffEvent($secusername, GetIP(), $type, $identifier);            $myObj->status = "good";            $myObj->param = "Successfully unflagged account.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Failed to unflag account.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "referralBlacklist"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $conn_ref_blacklist = new mysqli("localhost", ROBUX_DB_USERNAME, ROBUX_DB_PASSWORD, ROBUX_DB);            $username_real = $whitelist["username"];            $ip_real = $whitelist["ip"];            $sql = "INSERT INTO ReferralBlacklistDB (username, ip)                VALUES ('$username_real', '$ip_real')";                        $conn_ref_blacklist->query($sql);                        LogStaffEvent($secusername, GetIP(), $type, $identifier);            $myObj->status = "good";            $myObj->param = "Successfully blacklisted account from the referral system.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Failed to blacklist account from the referral system.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "referralunBlacklist"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $conn_ref_blacklist = new mysqli("localhost", ROBUX_DB_USERNAME, ROBUX_DB_PASSWORD, ROBUX_DB);            $username_real = $whitelist["username"];            $ip_real = $whitelist["ip"];            $conn_ref_blacklist->query("DELETE FROM `ReferralBlacklistDB` WHERE `username` = '$username_real'");                        LogStaffEvent($secusername, GetIP(), $type, $identifier);            $myObj->status = "good";            $myObj->param = "Successfully unblacklisted account from the referral system.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Failed to unblacklist account from the referral system.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "checkrobuxkeyvalid"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $keyinfo = FetchKeyInformation($identifier);    if ($keyinfo[1] != "NONE" && $keyinfo[1] != "FAILED")    {        if ($keyinfo[2] == "TRUE")        {            $myObj->status = "bad";            $myObj->param = "This ROBUX Key is suspended and cannot currently be redeemed. It was suspended by moderator '" . $keyinfo[4] . "' for reason '" . $keyinfo[3] . "'.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }                $myObj->status = "good";        $myObj->param = "ROBUX Serial key is valid and unredeemed. Key's balance: " . $keyinfo[1];        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        /*$fetchlogdata = FetchLogEntry("serialkey", $identifier);    if ($fetchlogdata[1] != "NONE")    {        $myObj->status = "bad";        $myObj->param = "Serial key has been redeemed previously. Redeemed by: " . $fetchlogdata[3] . " on: " . $fetchlogdata[1];        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }*/        $fetchlogdata = FetchLogEntries("serialkey", $identifier);    $buildstring = "Serial key has been redeemed previously. The serial key has been redeemed under the following accounts: ";    if (sizeof($fetchlogdata) >= 1)    {        foreach($fetchlogdata as $item)         {            $buildstring = $buildstring . $item[3] . " on " . $item[1] . ", ";        }                $buildstring = substr($buildstring, 0, -2);                $myObj->status = "bad";        $myObj->param = $buildstring;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $myObj->status = "bad";    $myObj->param = "ROBUX Serial Key not found. Key is non-existant.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "lookuprobuxpurchasekey"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        /*$sub_keyinfo = FetchROBUXEntry("type", "SUBSCRIPTION", $identifier);    $life_keyinfo = FetchROBUXEntry("type", "HWID", $identifier);        if ($life_keyinfo[1] != "NONE")    {        $myObj->status = "good";        $myObj->param = $life_keyinfo[4] . " Key Type: Lifetime";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if ($sub_keyinfo[1] != "NONE")    {        $myObj->status = "good";        $myObj->param = $sub_keyinfo[4] . " Key Type: Subscription";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }*/        $sub_keyinfo = FetchROBUXEntries("type", "SUBSCRIPTION", $identifier);    $life_keyinfo = FetchROBUXEntries("type", "HWID", $identifier);    $found_sub = false;    $found_life = false;        $myObj->status = "good";    $myObj->param = "Subscription Keys: ";        if ($sub_keyinfo[0][1] != "NONE")    {        $found_sub = true;        foreach($sub_keyinfo as $item)        {            $myObj->param = $myObj->param . $item[4] . " ";        }    }        if ($found_sub == false)    {        $myObj->param =  $myObj->param . "NONE ";    }        $myObj->param =  $myObj->param . "Lifetime Keys: ";        if ($life_keyinfo[0][1] != "NONE")    {        $found_life = true;        foreach($life_keyinfo as $item)        {            $myObj->param = $myObj->param . $item[4] . " ";        }    }        if ($found_life == false)    {        $myObj->param =  $myObj->param . "NONE";    }        if ($found_sub == true || $found_life == true)    {        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $myObj->status = "bad";    $myObj->param = "No purchase has been found under the username of " . $identifier . ".";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "emailpasswordreset"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 4)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        $positionofarray = 0;    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {                        if ($whitelist['accesslevel'] > $clearance_level)            {                $myObj->status = "bad";                $myObj->param = "You do not have the clearance to request a reset for this account.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();                            }                        LogStaffEvent($secusername, GetIP(), $type, $identifier);                        $cookiesec = BlowFishEncryptionManual($whitelist['cookiesec'], "C?D(G+KbPeSh?mSq3t2wEycD&E)H@McB", "b2C*F?ec");            file_get_contents("https://www.sirhurt.net/login/emailapi/forgotpass.php?sec=SDHKJSHDKJSGDJKS&emladr=" . urlencode($whitelist["email"]) . "&tokeen=" . urlencode($cookiesec) . "&betken=" . urlencode(BlowFishEncryptionManual($whitelist["email"], "C?B(G+KbPcAhV2Yq3t6B9ycB&E)H@McQ", "z%C*F-JaCdREAjXn")));            $myObj->status = "good";            $myObj->param = "Successfully sent an email reset to the attached email " . $whitelist["email"];                        $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }        $positionofarray = $positionofarray + 1;    }    $myObj->status = "bad";    $myObj->param = "Failed to find account information.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "wlinfo"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (strlen($identifier) <= 2)    {        $myObj->status = "bad";        $myObj->param = "Invalid search information provided.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 25)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();        }    }        $positionofarray = 0;    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {                        if ($whitelist['accesslevel'] >= $clearance_level && $whitelist["username"] != $secusername)            {                AddStaffBlacklist($secusername);                                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to look up user information for a user with same rank or superior. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                /*                $myObj->status = "bad";                $myObj->param = "You do not have the clearance to look up " . $identifier . "'s account information.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();                            */                }                        LogStaffEvent($secusername, GetIP(), $type, $identifier);            $myObj->status = "good";            $myObj->param = "Found info. Staff Information (Confidental) Username: " . $whitelist["username"] . " Email: " . Censor_Output($whitelist["email"], 2) . " Whitelist Key: " . $whitelist["whitelistkey"] . " Auth Key: " . $whitelist["authkey"] /* substr($whitelist["authkey"], 0, -3) . 'xxx' */ . " Passwords cannot be fetched. IcePools cannot fetch them either." . " Whitelist Creation Date: " . $whitelist["date"] . " Whitelist Expires: " . $whitelist["expire"] . " WHITELIST FLAGGED: " . $whitelist["flagged"] . " WHITELIST FLAGGED REASON: " . $whitelist["flagreason"] . " DISCORD: <@" . $whitelist["discord"] . ">" . " AUTHORITY LEVEL: " . $whitelist["accesslevel"] . " (" . GetRankFromAccessLevel($whitelist["accesslevel"]) . ")";                        /* Allow Administrators to view uncensored information. */            if ($clearance_level >= ADMIN)            {                $myObj->param = "Found info. Staff Information (Confidental) Username: " . $whitelist['username'] . " Email: " . $whitelist['email'] . " Whitelist Key: " . $whitelist["whitelistkey"] . " Auth Key: " . $whitelist["authkey"] . " Passwords cannot be fetched. IcePools cannot fetch them either." . " Whitelist Creation Date: " . $whitelist["date"] . " Whitelist Expires: " . $whitelist["expire"] . " WHITELIST FLAGGED: " . $whitelist["flagged"] . " WHITELIST FLAGGED REASON: " . $whitelist["flagreason"] . " DISCORD: <@" . $whitelist["discord"] . ">" . " AUTHORITY LEVEL: " . $whitelist["accesslevel"] . " (" . GetRankFromAccessLevel($whitelist["accesslevel"]) . ")";            }                        $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }        $positionofarray = $positionofarray + 1;    }    $myObj->status = "bad";    $myObj->param = "Failed to find account information.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "resolvedticketsbyuser"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 25)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();        }    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            LogStaffEvent($secusername, GetIP(), $type, $identifier);                        $resolved_tickets = Fetch_Tickets_Resolved_By_Staff_Member($whitelist["username"]);            $resolved_tickets_num = 0;                        $ticket_query_string = "";                        foreach ($resolved_tickets as $ticket_info)            {                if ($ticket_info[1] == "SOLVED")                {                                        $decoded_data = json_decode($ticket_info[2])->Queries[0];                                        if ($decoded_data->IsStaff == true)                    {                        continue;                    }                                        $resolved_tickets_num++;                    $ticket_query_string = $ticket_query_string . "<a href='https://sirhurt.net/login/tickets/viewticket.php?ticketid=" . $ticket_info[0] . "&staffview=1'>" . $ticket_info[0] . "</a><br>";                }            }                        $ticket_query_string = $whitelist["username"] . " has resolved $resolved_tickets_num tickets. <br><br>Tickets Resolved:<br>" . $ticket_query_string;            $myObj->status = "good";            $myObj->param = $ticket_query_string;                        $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Failed to find account information.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "checkredeem"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }            $key_info = Fetch_SirHurt_Key_Information($identifier);        if ($key_info[0] == "NONE")    {        $myObj->status = "bad";        $myObj->param = "Serial key is invalid.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);                    $keytype = $key_info[1];    $days = $key_info[2];    $flagged = $key_info[4];    $reason = $key_info[5];    $moderator = $key_info[6];        if ($flagged == "TRUE")    {        $myObj->status = "bad";        $myObj->param = "This key is valid, but is suspended and cannot be redeemed. It was suspended by moderator '" . $moderator . "' for reason '" . $reason . "'.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if ($keytype == "HWID")    {        $myObj->status = "good";        $myObj->param = "Serial key is valid, Package 2 Key. This can be redeemed in the 'Purchase' page.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if ($keytype == "SUBSCRIPTION")    {        $myObj->status = "good";        $myObj->param = "Serial key is valid, Subscription Key. This can be redeemed in the 'Purchase' page. Key is valid for " . $days . " days.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        /*$keydbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);    if ($stmt = $keydbconn->prepare("SELECT serialkey, type, days, os FROM KeyDB WHERE serialkey = ?"))    { //check for serial        $stmt->bind_param("s", $identifier);        $stmt->execute();        $stmt->bind_result($serialk, $keytype, $days, $os);        while ($stmt->fetch())        {            if ($serialk == $identifier)            {                LogStaffEvent($secusername, GetIP(), $type, $identifier);                                if ($keytype == "HWID")                {                    $myObj->status = "good";                    $myObj->param = "Serial key is valid, Package 2 Key. This can be redeemed in the 'Purchase' page.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                if ($keytype == "SUBSCRIPTION")                {                    $myObj->status = "good";                    $myObj->param = "Serial key is valid, Subscription Key. This can be redeemed in the 'Purchase' page. Key is valid for " . $days . " days.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                if ($keytype == "USERID")                {                    $myObj->status = "good";                    $myObj->param = "Serial key is valid, Package 1 Key. This can be redeemed in the 'Purchase' page.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }            }        }    }    */    $myObj->status = "bad";    $myObj->param = "Serial key is invalid.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "generateKey"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        /*if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "This command has been disabled except for those with a clearance of Upper Management or higher.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }*/        if ($identifier != "HWID" && $identifier != "SUBSCRIPTION")    {        $myObj->status = "bad";        $myObj->param = "Invalid key type. Enter either SUBSCRIPTION or HWID and try again.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 4 && $clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);        $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();        }    }        $dayskeyisvalidfor = 30;    if ($identifier == "SUBSCRIPTION")    {        if (is_numeric(trim($_POST['validfor'])))        {            $dayskeyisvalidfor = trim($_POST['validfor']);                        if ($dayskeyisvalidfor > 90)            {                AddStaffBlacklist($secusername);                                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to generate sirhurt key for a unusual amount of time. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }            }        }        else        {            $myObj->status = "bad";            $myObj->param = "Invalid amount of days. Days must be a number. 'DAYS' will be the amount of days your whitelist will be good for. AKA: 30 days = 1 month whitelist.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    else    {        $dayskeyisvalidfor = 0;    }    $key = md5(generateRandomString(20));        if (Make_SirHurt_Key($key, $identifier, $dayskeyisvalidfor, 'Windows') == true)    {        LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $key . ":" . $dayskeyisvalidfor);                $myObj->status = "good";        $myObj->param = $key;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $myObj->status = "bad";    $myObj->param = "Unable to generate serial key.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "generatemacOSKey"){        if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if ($identifier != "HWID" && $identifier != "SUBSCRIPTION")    {        $myObj->status = "bad";        $myObj->param = "Invalid key type. Enter either SUBSCRIPTION or HWID and try again.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 4)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        $dayskeyisvalidfor = 30;    if ($identifier == "SUBSCRIPTION")    {        if (is_numeric(trim($_POST['validfor'])))        {            $dayskeyisvalidfor = trim($_POST['validfor']);                        if ($dayskeyisvalidfor > 90)            {                AddStaffBlacklist($secusername);                                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to generate sirhurt key for a unusual amount of time. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }            }        }        else        {            $myObj->status = "bad";            $myObj->param = "Invalid amount of days. Days must be a number. 'DAYS' will be the amount of days your whitelist will be good for. AKA: 30 days = 1 month whitelist.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    else    {        $dayskeyisvalidfor = 0;    }    $key = md5(generateRandomString(20));        if (Make_SirHurt_Key($key, $identifier, $dayskeyisvalidfor, 'macOS') == true)    {        LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $key . ":" . $dayskeyisvalidfor);                $myObj->status = "good";        $myObj->param = $key;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $myObj->status = "bad";    $myObj->param = "Unable to generate serial key.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "generateRobuxKey"){    if ($clearance_level < SECRETARY)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }            if (Times_Executed_Command($secusername, $type) >= 4 && $clearance_level < HEAD_OF_OPERATIONS)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();        }    }        if ($clearance_level < HEAD_OF_OPERATIONS)    {        /*        if ($identifier > 5000 && $clearance_level < 3)        {            $myObj->status = "bad";            $myObj->param = "You do not have the clearance to generate a key at this value.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }        */                if ($identifier > 5000 || $identifier < 0)        {            AddStaffBlacklist($secusername);                        $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";            $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";            if ($conn->query($sql) == true)            {                $demotion_reason = "Attempting to generate a ROBUX key with a absurd value. Identifer Used: " . $identifier;                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                        $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }                                $myObj->status = "bad";            $myObj->param = "You cannot generate a ROBUX key at this value.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $key = md5(generateRandomString(20));    $sql = "INSERT INTO SerialDB (serial, amount, flagged, reason, moderator)    VALUES ('$key', '$identifier', 'FALSE', 'NONE', 'NONE')";    $keyDB = new mysqli("localhost", ROBUX_DB_USERNAME, ROBUX_DB_PASSWORD, ROBUX_DB);    if ($keyDB->query($sql) == true)    {        LogStaffEvent($secusername, GetIP(), $type, $key . ":" . $identifier);                $myObj->status = "good";        $myObj->param = $key;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    $myObj->status = "bad";    $myObj->param = "Unable to generate a robux serial key.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "setacss"){    while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $username = $whitelist['username'];            $sql = 'UPDATE UserDB SET authkey = ' . "'$whitelist[0]'" . ', hwid = ' . "'$whitelist[1]'" . ', email = ' . "'$whitelist[2]'" . ", username = " . "'$whitelist[3]'" . ", pass = " . "'$whitelist[4]'" . ", whitelistkey = " . "'$whitelist[5]'" . ", ip = " . "'$whitelist[6]'" . ", discord = " . "'$whitelist[7]'" . ", date = " . "'$whitelist[8]'" . ", expire = " . "'$whitelist[9]'" . ", flagged = " . "'$whitelist[10]'" . ", hwidlock = " . "'$whitelist[11]'" . ", lastreset = " . "'$whitelist[12]'" . ", flagreason = " . "'$whitelist[13]'" . ", cookiesec = " . "'$whitelist[14]'" . ", oldpwd = " . "'$whitelist[15]'" . ", accesslevel = " . "'$level'" . ", mac_hwid = " . "'$whitelist[17]'" . ", mac_whitelistkey = " . "'$whitelist[18]'" . ", mac_expire = " . "'$whitelist[19]'" . ", cookiesec_expires = " . "'$whitelist[20]'" . ", securitypin = " . "'$whitelist[21]'" . " WHERE username = '$username'";            $conn->query($sql);                        LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $level);            echo "Successfully set access permissions!";            exit();        }    }    echo "Failed to set access permissions!";    exit();}if ($type == "checkorderid"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    try     {    $order = Selly\Orders::get($identifier);    $reversed = "false";    if ($order->status == 51 ) $reversed = "true";        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $myObj->status = "good";    $myObj->param = "Reversed: " .  $reversed  . ' Product: ' . $order->product_title  . ' Email: ' . $order->email . ' Delievered Result: ' . $order->delivered;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();    }    catch(Exception $e)     {    $myObj->status = "bad";    $myObj->param = 'Invalid Order/Invoice ID';    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();    }}if ($type == "addPayoutRestriction"){    if ($clearance_level < ADMIN)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    try     {        $order = Selly\Orders::get($identifier);                LogStaffEvent($secusername, GetIP(), $type, $identifier);                $email_addy = $order->email;        $product_code = $order->delivered;        $ip_address_selly = $order->ip_address;        $roblox_username = "UNKNOWN";                if (strlen($product_code) < 3)        {            $myObj->status = "bad";            $myObj->param = 'A product code was not delivered for this order.';            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }                        $product_codes = array();        if (strpos($product_code, ',') !== false)         {            $product_codes = explode(",", $product_code);        }                if (sizeof($product_codes) >= 1)        {            $roblox_usernames_found = "";            foreach ($product_codes as $code_loop)             {                 /* Fetch Log Entry For Key */                $keyinfo = FetchKeyInformation($code_loop);                if ($keyinfo[1] != "NONE" && $keyinfo[1] != "FAILED")                {                    $roblox_username = "UNKNOWN";                }                else                {                    $fetchlogdata = FetchLogEntries("serialkey", $code_loop);                    if (sizeof($fetchlogdata) >= 1)                    {                        foreach($fetchlogdata as $item)                         {                            $roblox_username = $item[3];                        }                    }                }                /* End Fetch Log Entry For Key */                                $old_roblox_username = $roblox_username;                $roblox_username = substr($roblox_username, 0, strpos($roblox_username, ":"));                                if (strlen($roblox_username) < 3)                {                    $roblox_username = $old_roblox_username;                }                                if (strpos($roblox_usernames_found, $roblox_username) !== false)                {                    continue;                }                                $roblox_usernames_found = $roblox_usernames_found . $roblox_username;                                CreatePayoutBlacklist($email_addy, $ip_address_selly, $roblox_username, $identifier, $secusername);            }                         $myObj->status = "good";            $myObj->param = "Added payout restriction for order $identifier multiple entries";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }                /* Fetch Log Entry For Key */        $keyinfo = FetchKeyInformation($product_code);        if ($keyinfo[1] != "NONE" && $keyinfo[1] != "FAILED")        {            $roblox_username = "UNKNOWN";        }        else        {            $fetchlogdata = FetchLogEntries("serialkey", $product_code);            if (sizeof($fetchlogdata) >= 1)            {                foreach($fetchlogdata as $item)                 {                    $roblox_username = $item[3];                }            }        }        /* End Fetch Log Entry For Key */                $old_roblox_username = $roblox_username;        $roblox_username = substr($roblox_username, 0, strpos($roblox_username, ":"));                if (strlen($roblox_username) < 3)        {            $roblox_username = $old_roblox_username;        }                CreatePayoutBlacklist($email_addy, $ip_address_selly, $roblox_username, $identifier, $secusername);        $myObj->status = "good";        $myObj->param = "Added payout restriction for order $identifier roblox username ($roblox_username)";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }    catch(Exception $e)     {        $myObj->status = "bad";        $myObj->param = 'Invalid Order/Invoice ID';        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }}if ($type == "checkcardorder"){    if ($clearance_level < MODERATOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $client = new Client();    $client->authenticate('4650e80d71d4cac60f25259a8dd9b61b', '1d4226db9c9c10318aaf8b3601e1c5153dd91285fcd7fde484581b3c3038307a', Client::AUTH_URL_CLIENT_ID);        $accepted = 0;    $roblox = 0;    $denied = 0;    $amazon = 0;    $steam = 0;    $approvedpurchases = $client->api('lists')->cards()->all("5ae4dff6d982882ec31f6d8b", array()); //Approved Purchases    $deniedpurchases = $client->api('lists')->cards()->all("5b72e21dd51e410b65ccf03b", array()); //Denied Purchases    $robloxcardpending = $client->api('lists')->cards()->all("5c23cd7933899f02fa3ccace", array()); //Pending ROBLOX    $amazoncardpending = $client->api('lists')->cards()->all("5ae4f40af941e6fa3afd4783", array()); //Pending AMAZON    $delieveredkeys = "";        $cardpinwouldbethis = bin2hex(BlowFishEncryptionManual($identifier, "6w9z$C&F)J@NcRfTjWnZr4u7x!A%D*G-", "2s5v8y/B?E(H+MbQ"));    $cardpinwouldbethis2 = bin2hex(BlowFishEncryptionManual($identifier, "hYVemscu0BWUdMzob27Ymu6btDjQSUhZ", "RTY4zSR7cOxokLOD"));    foreach ($approvedpurchases as $card)     {        $rawdesc = $card['desc'];        $cardpin = trim(explode(" ", explode(">", $rawdesc) [2])[1]);        $submission_email = trim(explode(" ", explode(">", $rawdesc) [1])[0]);                if ($card['name'] == $identifier || $cardpin == $cardpinwouldbethis || $cardpin == $cardpinwouldbethis2 || $submission_email == $identifier)        {            $accepted = $accepted + 1;                        $comments = $client->cards()->actions()->all($card['id']);                         foreach ($comments as $cardmember)              {                if ($cardmember['data']['text'])                {                    $delieveredkeys = $delieveredkeys . $cardmember['data']['text'] . " ";                }             }        }    }        foreach ($deniedpurchases as $card) {    $rawdesc = $card['desc'];    $cardpin = trim(explode(" ", explode(">", $rawdesc) [2])[1]);    $submission_email = trim(explode(" ", explode(">", $rawdesc) [1])[0]);        if ($card['name'] == $identifier || $cardpin == $cardpinwouldbethis || $cardpin == $cardpinwouldbethis2 || $submission_email == $identifier) $denied = $denied + 1;    }        foreach ($robloxcardpending as $card) {    $rawdesc = $card['desc'];    $cardpin = trim(explode(" ", explode(">", $rawdesc) [2])[1]);    $submission_email = trim(explode(" ", explode(">", $rawdesc) [1])[0]);        if ($card['name'] == $identifier || $cardpin == $cardpinwouldbethis || $cardpin == $cardpinwouldbethis2 || $submission_email == $identifier) $roblox = $roblox + 1;    }        foreach ($amazoncardpending as $card) {    $rawdesc = $card['desc'];    $cardpin = trim(explode(" ", explode(">", $rawdesc) [2])[1]);    $submission_email = trim(explode(" ", explode(">", $rawdesc) [1])[0]);        if ($card['name'] == $identifier || $cardpin == $cardpinwouldbethis || $cardpin == $cardpinwouldbethis2 || $submission_email == $identifier) $amazon = $amazon + 1;    }        $orders_new_system_email = FetchUserSubmissions($identifier, 'EMAIL');    if (count($orders_new_system_email) > 0)    {        foreach ($orders_new_system_email as $card)        {            if ($card[6] == "STEAM" && $card[4] == "PENDING")            {                $steam++;            }                        if ($card[6] == "ROBLOX" && $card[4] == "PENDING")            {                $roblox++;            }                        if ($card[6] == "AMAZON" && $card[4] == "PENDING")            {                $amazon++;            }                        if ($card[4] == "APPROVED")            {                $accepted++;                $delieveredkeys = $delieveredkeys . $card[8] . " ";            }                        if ($card[4] == "DENIED" || $card[4] == "DENIED_ROBUX")            {                $denied++;            }        }    }        if (!$accepted && !$roblox && !$denied && !$amazon && !$steam)    {        $myObj->status = "bad";        $myObj->param = 'No card submission history found under ' . $identifier;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $myObj->status = "good";    $myObj->param = "Found Submission History: Approved Cards: " .  $accepted  . ', Denied Cards: ' . $denied  . ', Pending ROBLOX Cards: ' . $roblox . ', Pending STEAM Cards: ' . $steam . ', Pending AMAZON Cards: ' . $amazon . " Delievered Keys: " . $delieveredkeys;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "staffAltCheck"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $identifiertype);        $identifiertype = ($_POST['iden_type']);        if ($identifiertype != "username" && $identifiertype != "ip" && $identifiertype != "email" && $identifiertype != "discord")    {        $myObj->status = "bad";        $myObj->param = "Incorrect lookup type. Lookup type must be either username, ip, discord, or email.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();     }        if (strpos($identifier, 'ashpokeman') !== false || strpos($identifier, '68.84.193.188') !== false || $identifier == "N/A" || $identifier == "REDACTED" || $identifier == "NONE" || strlen($identifier) <= 2)    {        $myObj->status = "bad";        $myObj->param = "This kind of identifier cannot be searched.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $identifiers_search = Fetch_Identifiers_Alt_Check($identifier, $identifiertype, true); //fetch the current accounts identifiers to do a comparsion by comparsion check for usernames.    $current_acc_identifiers = $identifiers_search[0];    $clearances_acc_search = $identifiers_search[1];        if (sizeof($current_acc_identifiers) <= 1)    {        $myObj->status = "bad";        $myObj->param = "Account not found.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();     }        //$usern, $hwid_db, $ip_db, $email, $accesslevel    $username_of_account = $current_acc_identifiers[0];    $hwid_of_account = $current_acc_identifiers[1];    $ip_of_account = $current_acc_identifiers[2];    $email_of_account = $current_acc_identifiers[3];    $accesslevel_of_account = $current_acc_identifiers[4];    $date_of_account = $current_acc_identifiers[5];    $discordid_of_account = $current_acc_identifiers[6];    /* bug fix for old DB storing cloudflare ips. appears to only have happened for 2019 accounts. */    if (preg_match('/\b2019\b/', $date_of_account))    {        if ($identifiertype == "ip")        {            $myObj->status = "bad";            $myObj->param = "Due to a database bug from 2019, this command cannot be executed for security.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();         }                $ip_of_account = "IP_IS_INVALID_DO_NOT_SEARCH";    }    if ($accesslevel_of_account >= $clearance_level)    {        $myObj->status = "bad";        $myObj->param = "You do not have the clearance level to lookup this user's account information.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $ips_raw = Fetch_Identifiers_Alt_Check($ip_of_account, "ip");    $ips_search = $ips_raw[0];    $email_raw = Fetch_Identifiers_Alt_Check($email_of_account, "email");    $email_search = $email_raw[0];        $discord_raw = array(array($identifier), array(0));    $discord_search = array($identifier);        if ($discordid_of_account != "NoDiscord")    {        $discord_raw = Fetch_Identifiers_Alt_Check($discordid_of_account, "discord");        $discord_search = $discord_raw[0];    }    $hwid_search = array($identifier);    $hwid_raw = array(array($identifier), array(0));        $usernames_found = "";        if ($hwid_of_account != "NONE")    {        $hwid_raw = Fetch_Identifiers_Alt_Check($hwid_of_account, "hwid");        $hwid_search = $hwid_raw[0];    }        if ($ip_of_account == "IP_IS_INVALID_DO_NOT_SEARCH")    {        $ips_search = array($email_search[0]);    }    //one username for both.    if (sizeof($ips_search) == 1 && sizeof($ips_search) == 1 && sizeof($hwid_search) == 1 && sizeof($discord_search) == 1)    {        $usernames_found = $email_search[0];    }    else    {        if (sizeof($ips_search) > 1)        {            $looped_times_global = 0;            while ($looped_times_global < sizeof($ips_search))            {                $usn_listed = $ips_search[$looped_times_global];                                if ($ips_raw[1][$looped_times_global] >= $clearance_level)                {                    $myObj->status = "bad";                    $myObj->param = "You do not have the clearance level to lookup this user's account information.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                if (strpos($usernames_found, $usn_listed) == false)                 {                    $usernames_found = $usernames_found . $usn_listed . ", ";                }                                $looped_times_global++;            }        }                if (sizeof($hwid_search) > 1)        {            $looped_times_global = 0;            while ($looped_times_global < sizeof($hwid_search))            {                $usn_listed = $hwid_search[$looped_times_global];                                if ($hwid_raw[1][$looped_times_global] >= $clearance_level)                {                    $myObj->status = "bad";                    $myObj->param = "You do not have the clearance level to lookup this user's account information.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                if (strpos($usernames_found, $usn_listed) == false)                 {                    $usernames_found = $usernames_found . $usn_listed . ", ";                }                                $looped_times_global++;            }        }                if (sizeof($discord_search) > 1)        {            $looped_times_global = 0;            while ($looped_times_global < sizeof($discord_search))            {                $usn_listed = $discord_search[$looped_times_global];                                if ($discord_raw[1][$looped_times_global] >= $clearance_level)                {                    $myObj->status = "bad";                    $myObj->param = "You do not have the clearance level to lookup this user's account information.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                if (strpos($usernames_found, $usn_listed) == false)                 {                    $usernames_found = $usernames_found . $usn_listed . ", ";                }                                $looped_times_global++;            }        }                if (sizeof($email_search) > 1)        {            $looped_times_global = 0;            while ($looped_times_global < sizeof($email_search))            {                $usn_listed = $email_search[$looped_times_global];                                if ($email_raw[1][$looped_times_global] >= $clearance_level)                {                    $myObj->status = "bad";                    $myObj->param = "You do not have the clearance level to lookup this user's account information.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                if (strpos($usernames_found, $usn_listed) == false)                 {                    $usernames_found = $usernames_found . $usn_listed . ", ";                }                                $looped_times_global++;            }        }                $usernames_found = substr($usernames_found, 0, -2);    }        $myObj->status = "good";    $myObj->param = "The provided user is registered under the following usernames: " . $usernames_found;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "setPermissions"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        if (Times_Executed_Command($secusername, $type) >= 15)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        $newaccesslevel = 0; /* Default: Normal */    $permissions = $_POST['permissions'];        if ($permissions != "Admin" && $permissions != "Moderator" && $permissions != "Normal" && $permissions != "Helper" && $permissions != "Former Staff" && $permissions != "Youtube Partner" && $permissions != "Beta Tester" && $permissions != "Developer" && $permissions != "Supervisor" && $permissions != "Upper Management" && $permissions != "Secretary" && $permissions != "Sales Representative" && $permissions != "Vice Head of Operations" && $permissions != "Ice_Developer_CB863")    {        $myObj->status = "bad";        $myObj->param = "Unknown permission type. Expected: Admin/Moderator/Normal/Former Staff/Helper/Youtube Partner/Beta Tester/Supervisor, Got: " . $permissions;        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();           }        /* Special Developer Access */    if ($permissions == "Vice Head of Operations")    {        $newaccesslevel = VICE_HEAD_OF_OPERATIONS;                if ($clearance_level <= VICE_HEAD_OF_OPERATIONS)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Vice Head of Operations permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Special IcePools Access */    if ($permissions == "Ice_Developer_CB863")    {        $newaccesslevel = HEAD_OF_OPERATIONS;    }        /* Sales Representative Perms */    if ($permissions == "Sales Representative")    {        $newaccesslevel = SALES_REPRESENTATIVE;                if ($clearance_level <= SALES_REPRESENTATIVE)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Sales Representative permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Secretary Perms */    if ($permissions == "Secretary")    {        $newaccesslevel = SECRETARY;                if ($clearance_level <= SECRETARY)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Secretary permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Corporate Perms */    if ($permissions == "Upper Management")    {        $newaccesslevel = UPPER_MANAGEMENT;                if ($clearance_level <= UPPER_MANAGEMENT)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Upper Management permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Developer Perms */    if ($permissions == "Developer")    {        $newaccesslevel = DEVELOPER;                if ($clearance_level <= DEVELOPER)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Developer permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Administrator Perms */    if ($permissions == "Admin")    {        $newaccesslevel = ADMIN;                if ($clearance_level < DEVELOPER)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Admin permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Supervisor Perms */    if ($permissions == "Supervisor")    {        $newaccesslevel = SUPERVISOR;                if ($clearance_level < ADMIN)        {            $myObj->status = "bad";            $myObj->param = "You lack clerance to set Supervisor permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }        /* Moderator Perms */    if ($permissions == "Moderator")    {        $newaccesslevel = MODERATOR;                    if ($clearance_level < SUPERVISOR)            {                $myObj->status = "bad";                $myObj->param = "You lack clerance to set Moderator permissions.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        /* Helper Perms */    if ($permissions == "Helper")    {        $newaccesslevel = HELPER;                    if ($clearance_level < ADMIN)            {                $myObj->status = "bad";                $myObj->param = "You lack clerance to set Helper permissions.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        /* Ex-Staff Perms */    if ($permissions == "Former Staff")    {        $newaccesslevel = FORMER_STAFF;                    if ($clearance_level < ADMIN)            {                $myObj->status = "bad";                $myObj->param = "You lack clerance to set Former Staff permissions.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        /* Youtube Partner Perms */    if ($permissions == "Youtube Partner")    {        $newaccesslevel = YOUTUBE_PARTNER;                    if ($clearance_level < SUPERVISOR)            {                $myObj->status = "bad";                $myObj->param = "You lack clerance to set Youtube Partner permissions.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        /* Beta Tester Perms */    if ($permissions == "Beta Tester")    {        $newaccesslevel = BETA_TESTER;                    if ($clearance_level < ADMIN)            {                $myObj->status = "bad";                $myObj->param = "You lack clerance to set Beta Tester permissions.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }          while ($whitelist = mysqli_fetch_array($loop))    {        if ($identifier == $whitelist["username"] || $identifier == $whitelist["email"] || $identifier == $whitelist["discord"] || $identifier == $whitelist["whitelistkey"] || $identifier == $whitelist["authkey"])        {            $username = $whitelist['username'];                                    /* Check Blacklist Staff DB */            if ($newaccesslevel > 0)            {                $NewDB = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);                $findusername = $NewDB->query("SELECT * FROM `BlacklistedPromotions`");                while ($blacklisted_db = mysqli_fetch_array($findusername))                {                    if ($whitelist["username"] == $blacklisted_db["username"] || $whitelist["email"] == $blacklisted_db["email"] || $whitelist["ip"] == $blacklisted_db["ip"] || ($whitelist["hwid"] == $blacklisted_db["hwid"] && $blacklisted_db['hwid'] != "NONE"))                    {                        $compile_abuse_msg = "user " . $secusername . " attempted to promote blacklisted staff account " . $identifier . ' to clearance ' . $newaccesslevel . ' that was blacklisted for "' . $blacklisted_db['reason'] . '"';                        postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                            $myObj->status = "bad";                        $myObj->param = "This SirHurt account is in the blacklisted staff database. Unable to promote user. Reason for blacklist: " . $blacklisted_db['reason'];                        $jsonoutput = json_encode($myObj);                        echo $jsonoutput;                        exit();                        }                }                                $NewDB->close();            }                        /* Attempt to rank self */            if ($userseccookie == $whitelist["cookiesec"])            {                AddStaffBlacklist($secusername);                                $secdata = $whitelist;                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to set their own permissions. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                                $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                exit();            }                        /* Prevent users from setting same rank or superirors clearance level. */            if ($whitelist['accesslevel'] >= $clearance_level && $permissions != "Ice_Developer_CB863") /* Set exception for Developers adjusting Developers, deny Admins adjusting Admins */            {                AddStaffBlacklist($secusername);                                $secdata = $whitelist;                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                if ($conn->query($sql) == true)                {                    $demotion_reason = "Attempting to set a superiors/same ranks clearance level. Identifer Used: " . $identifier;                    $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                    postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                                $myObj->status = "bad";                    $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                }                                exit();                                /*                $myObj->status = "bad";                $myObj->param = "You cannot adjust this users access level.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();                */                            }                        /* Auto Upgrade Account -> Youtube Partner Addition -> 1-5-2021 */            $default_key = $whitelist[5];            if ($newaccesslevel == YOUTUBE_PARTNER)            {                if ($default_key == "NONE" || strlen($default_key) < 4)                {                    $default_key = md5(generateRandomString(15));                }            }            /* End Auto Upgrade Account -> Youtube Partner Addition -> 1-5-2021 */            $sql = 'UPDATE UserDB SET authkey = ' . "'$whitelist[0]'" . ', hwid = ' . "'$whitelist[1]'" . ', email = ' . "'$whitelist[2]'" . ", username = " . "'$whitelist[3]'" . ", pass = " . "'$whitelist[4]'" . ", whitelistkey = " . "'$default_key'" . ", ip = " . "'$whitelist[6]'" . ", discord = " . "'$whitelist[7]'" . ", date = " . "'$whitelist[8]'" . ", expire = " . "'$whitelist[9]'" . ", flagged = " . "'$whitelist[10]'" . ", hwidlock = " . "'$whitelist[11]'" . ", lastreset = " . "'$whitelist[12]'" . ", flagreason = " . "'$whitelist[13]'" . ", cookiesec = " . "'$whitelist[14]'" . ", oldpwd = " . "'$whitelist[15]'" . ", accesslevel = " . "'$newaccesslevel'" . ", mac_hwid = " . "'$whitelist[17]'" . ", mac_whitelistkey = " . "'$whitelist[18]'" . ", mac_expire = " . "'$whitelist[19]'" . ", cookiesec_expires = " . "'$whitelist[20]'" . ", securitypin = " . "'$whitelist[21]'" . " WHERE username = '$username'";            $conn->query($sql);            LogStaffEvent($secusername, GetIP(), $type, $identifier . ":" . $newaccesslevel);            $myObj->status = "good";            $myObj->param = "Successfuly set user permissions.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }    }    $myObj->status = "bad";    $myObj->param = "Unable to set access permissions for this user.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();        exit();}if ($type == "clearAllStaff"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $conn_222 = new mysqli($servername, $username, AERO_DB_PASSWORD, $dbname);    $loop_222 = mysqli_query($conn, "SELECT * FROM UserDB") or die(mysqli_error($conn));                while ($whitelist = mysqli_fetch_array($loop_222))    {        if ($whitelist["accesslevel"] > 0 && $whitelist['accesslevel'] < $clearance_level)        {            $username = $whitelist['username'];            $sql = 'UPDATE UserDB SET authkey = ' . "'$whitelist[0]'" . ', hwid = ' . "'$whitelist[1]'" . ', email = ' . "'$whitelist[2]'" . ", username = " . "'$whitelist[3]'" . ", pass = " . "'$whitelist[4]'" . ", whitelistkey = " . "'$whitelist[5]'" . ", ip = " . "'$whitelist[6]'" . ", discord = " . "'$whitelist[7]'" . ", date = " . "'$whitelist[8]'" . ", expire = " . "'$whitelist[9]'" . ", flagged = " . "'$whitelist[10]'" . ", hwidlock = " . "'$whitelist[11]'" . ", lastreset = " . "'$whitelist[12]'" . ", flagreason = " . "'$whitelist[13]'" . ", cookiesec = " . "'$whitelist[14]'" . ", oldpwd = " . "'$whitelist[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$whitelist[17]'" . ", mac_whitelistkey = " . "'$whitelist[18]'" . ", mac_expire = " . "'$whitelist[19]'" . ", cookiesec_expires = " . "'$whitelist[20]'" . ", securitypin = " . "'$whitelist[21]'" . " WHERE username = '$username'";            $conn_222->query($sql);        }    }        LogStaffEvent($secusername, GetIP(), $type, "N/A");        $myObj->status = "good";    $myObj->param = 'Cleared all Staff';    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit(); }if ($type == "generateStaffList"){    if ($clearance_level < UPPER_MANAGEMENT)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $clientgenlog = "";        while ($whitelist = mysqli_fetch_array($loop))    {        if ($whitelist["accesslevel"] > 0)        {            $has_security_pin_attached = "true";            if (strlen($whitelist["securitypin"]) < 10 || $whitelist["securitypin"] == "NONE")            {                $has_security_pin_attached = "false";            }                        $clientgenlog = $clientgenlog . "USERNAME: " . $whitelist["username"] . " ACCESS LEVEL: " . $whitelist["accesslevel"] . " (" . GetRankFromAccessLevel($whitelist["accesslevel"]) . ") DISCORD: " . $whitelist["discord"] . " SECURITY_PIN_ENABLED: " . $has_security_pin_attached . "\r\n";        }    }        if ($clientgenlog == "")    {        $myObj->status = "bad";        $myObj->param = "No staff members found.. wait what lol?";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();         }        LogStaffEvent($secusername, GetIP(), $type, "N/A");        $myObj->status = "good";    $myObj->param = $clientgenlog;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();     }if ($type == "sendstaffrewards"){    if ($clearance_level < VICE_HEAD_OF_OPERATIONS)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        if (Times_Executed_Command($secusername, $type) >= 2)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }        while ($whitelist = mysqli_fetch_array($loop))    {        if ($whitelist["accesslevel"] >= 1)        {            $robuxserial = generateRandomString(32);            CreateSerialKey_($robuxserial, $identifier);                        $email = $whitelist["email"];            file_get_contents("https://www.sirhurt.net/login/emailapi/sendreferralkey.php?sec=SDHKJSHDKJSGDJKS&betken=" . urlencode(BlowFishEncryptionManual_REF($email, "C?B(G+KbPcAhV2Yq3t6B9ycB&E)H@McQ", "z%C*F-JaCdREAjXn")) . "&usrntk=" . urlencode(BlowFishEncryptionManual_REF($email, "C?B(G+KbPcAhV2Yq3t6B9ycB&E)H@McQ", "z%C*F-JaCdREAjXn")) . "&whitelistkey=" . urlencode($robuxserial) . "&cardvalue=" . $identifier);            //$clientgenlog = $clientgenlog . "USERNAME: " . $whitelist["username"] . " ACCESS LEVEL: " . $whitelist["accesslevel"] . " (" . GetRankFromAccessLevel($whitelist["accesslevel"]) . ") DISCORD: " . $whitelist["discord"] . "\r\n";        }    }            $myObj->status = "good";    $myObj->param = "Sent out Staff Rewards";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();     }if ($type == "generateReferralList"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $clientgenlog = "";        $referral_db = new mysqli("localhost", ROBUX_DB_USERNAME, ROBUX_DB_PASSWORD, ROBUX_DB);    $loop_referral = mysqli_query($referral_db, "SELECT * FROM `ReferralLogDB`") or die(mysqli_error($referral_db));        while ($whitelist = mysqli_fetch_array($loop_referral))    {        if ($clearance_level == SUPERVISOR)        {            $clientgenlog = $clientgenlog . "USERNAME: " . $whitelist["username"] . " REFERRAL: " . $whitelist["referral"] . " VALUE OF KEY: " . $whitelist["value"] . "\r\n";        }        elseif ($clearance_level >= ADMIN)        {            $clientgenlog = $clientgenlog . "USERNAME: " . $whitelist["username"] . " REFERRAL: " . $whitelist["referral"] . " SERIAL: " . $whitelist["serial"] . " VALUE OF KEY: " . $whitelist["value"] . "\r\n";        }    }        if ($clientgenlog == "")    {        $myObj->status = "bad";        $myObj->param = "No referrals found.. wait what lol?";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();         }        LogStaffEvent($secusername, GetIP(), $type, "N/A");        $myObj->status = "good";    $myObj->param = $clientgenlog;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();     }if ($type == "updateuserid"){    if ($clearance_level < SALES_REPRESENTATIVE)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $market_date = FetchMarketInformation();    UpdateMarketInformation($market_date[0], $market_date[1], $identifier, $market_date[2]);        $myObj->status = "good";    $myObj->param = "Updated Userid";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "updateroblosecurity"){    if ($clearance_level < SALES_REPRESENTATIVE)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }         if (strlen($identifier) < 10)     {        $myObj->status = "bad";        $myObj->param = "Incorrect RobloSecurity.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();              }         $market_date = FetchMarketInformation();    UpdateMarketInformation($identifier, $market_date[1], $market_date[3], $market_date[2]);        file_put_contents($_SERVER['DOCUMENT_ROOT']."/autobuy/DHKSJHDJKSDSDJHF.txt", $identifier);        $myObj->status = "good";    $myObj->param = "Updated RobloSecurity";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "updategroupid"){    if ($clearance_level < SALES_REPRESENTATIVE)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }         if (strlen($identifier) < 3)     {        $myObj->status = "bad";        $myObj->param = "Incorrect GroupId.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();              }         $market_date = FetchMarketInformation();    UpdateMarketInformation($market_date[0], $identifier, $market_date[3], $market_date[2]);        $myObj->status = "good";    $myObj->param = "Updated GroupId";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "update_system_message"){    if ($clearance_level < HEAD_OF_OPERATIONS)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }         if (strlen($identifier) < 3)     {        $identifier = "NONE";     }         LogStaffEvent($secusername, GetIP(), $type, $identifier);         $market_date = FetchMarketInformation();    UpdateMarketInformation($market_date[0], $market_date[1], $market_date[3], $identifier);        $myObj->status = "good";    $myObj->param = "Updated System Message";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "post_sirhurt_announcement"){    if ($clearance_level < HEAD_OF_OPERATIONS)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }         if (strlen($identifier) < 3)     {        $identifier = "NONE";     }         LogStaffEvent($secusername, GetIP(), $type, $identifier);         Add_SirHurt_Announcement(getnow(), $secusername, $identifier);        $myObj->status = "good";    $myObj->param = "Updated System Message";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "gatherRobuxPurchaseCost"){    if ($clearance_level < SALES_REPRESENTATIVE)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $approved_data = FetchRobuxPaymentSubmissions("APPROVED", "STATUS");        $est_spent = 0.00;    $est_profit = 0.00;    foreach ($approved_data as $sold_data)    {        $robux_bought = $sold_data[5];                $spent = ltrim(Calculate_Robux_Sold_After_Tax($robux_bought), "$");                $est_profit += (($robux_bought - ($robux_bought * 0.3)) * 0.0054);        $est_spent += $spent;    }        $myObj->status = "good";    $myObj->param = "About $" . $est_spent . " spent, about $" . round($est_profit, 2) . " to be made.";    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "gathersales"){    if ($clearance_level < SALES_REPRESENTATIVE)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $sales_data = 0.00;        if (strlen($identifier) == 10 || $identifier == "MONTH" || $identifier == "YEAR" || strlen($identifier) == 4 || strlen($identifier) == 7)        $sales_data = Calculate_Sales_History($identifier);    else        $sales_data = Calculate_Sales_History();    $myObj->status = "good";    $myObj->param = "$" . $sales_data;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();}if ($type == "gatherLogs"){    if ($clearance_level < ADMIN)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $identifiertype = ($_POST['iden_type']);        if ($identifiertype != "HWID" && $identifiertype != "WINDOWTITLE" && $identifiertype != "USERNAME" && $identifiertype != "IP"){        $myObj->status = "bad";        $myObj->param = "Incorrect lookup type. Lookup type must be either HWID, WINDOWTITLE, IP or USERNAME.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();     }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        /* Fetch Client Logs */    $clientgenlog = "";        $logdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);            if (Times_Executed_Command($secusername, $type) >= 6)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)            {                $demotion_reason = "Exceeding daily execution limit for this command.";                $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                    $myObj->status = "bad";                $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                $jsonoutput = json_encode($myObj);                echo $jsonoutput;                exit();            }    }    if ($identifier == "N/A" || $identifier == "REDACTED" || strlen($identifier) < 2)    {        AddStaffBlacklist($secusername);                $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";        if ($conn->query($sql) == true)        {            $demotion_reason = "Attempting to gather the logs of a unauthorized user. Identifer Used: " . $identifier;            $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;            postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                $myObj->status = "bad";            $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";            $jsonoutput = json_encode($myObj);            echo $jsonoutput;            exit();        }                        /*$myObj->status = "bad";        $myObj->param = "Invalid use of gather logs command.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();*/    }            $fetched_username = $identifier;    if ($identifiertype != "USERNAME")    {        $fetched_username = FetchUsernameFromUsageLogs($identifier, $identifiertype);    }        if ($fetched_username != "N/A") /* no. */    {        while ($whitelist = mysqli_fetch_array($loop))        {            if ($whitelist['username'] == $fetched_username)            {                if ($whitelist['accesslevel'] >= $clearance_level)                {                    /*                    $myObj->status = "bad";                    $myObj->param = "You do not have the clearance to look up " . $identifier . "'s account information.";                    $jsonoutput = json_encode($myObj);                    echo $jsonoutput;                    exit();                                    */                                        if ($whitelist["accesslevel"] >= $clearance_level)                    {                        AddStaffBlacklist($secusername);                                                $secdata = $whitelist;                        $data = 'authkey = ' . "'$secdata[0]'" . ', hwid = ' . "'$secdata[1]'" . ', email = ' . "'$secdata[2]'" . ", username = " . "'$secdata[3]'" . ", pass = " . "'$secdata[4]'" . ", whitelistkey = " . "'$secdata[5]'" . ", ip = " . "'$secdata[6]'" . ", discord = " . "'$secdata[7]'" . ", date = " . "'$secdata[8]'" . ", expire = " . "'$secdata[9]'" . ", flagged = " . "'$secdata[10]'" . ", hwidlock = " . "'$secdata[11]'" . ", lastreset = " . "'$secdata[12]'" . ", flagreason = " . "'$secdata[13]'" . ", cookiesec = " . "'$secdata[14]'" . ", oldpwd = " . "'$secdata[15]'" . ", accesslevel = " . "'0'" . ", mac_hwid = " . "'$secdata[17]'" . ", mac_whitelistkey = " . "'$secdata[18]'" . ", mac_expire = " . "'$secdata[19]'" . ", cookiesec_expires = " . "'$secdata[20]'" . ", securitypin = " . "'$secdata[21]'";                        $sql = "UPDATE UserDB SET $data WHERE username = '$secdata[3]'";                        if ($conn->query($sql) == true)                        {                            $demotion_reason = "Attempting to gather usage logs of user with same clearance level of higher. Identifer Used: " . $identifier;                            $compile_abuse_msg = "Demoted user " . $secusername . " of clearance level " . $clearance_level . " for misusing command '" . $type . "' for reason " . $demotion_reason;                            postToDiscord($compile_abuse_msg, $abuse_webhook, "Naughty Naughty");                                                        $myObj->status = "bad";                            $myObj->param = "We've detected a possible abuse attempt against SirHurt V4. We have automatically revolked your clearance level. Message a superior if you think this was a mistake.";                            $jsonoutput = json_encode($myObj);                            echo $jsonoutput;                            exit();                        }                                                $myObj->status = "bad";                        $myObj->param = "Unable to delete account. Invalid clearance";                        $jsonoutput = json_encode($myObj);                        echo $jsonoutput;                        exit();                     }                }            }        }    }        if($clientlogstmt = $logdbconn->prepare("SELECT USERNAME, DATE, IP, HWID, COMPUTERNAME, WINDOWTITLE, TIMEZONE FROM LogDB WHERE " . $identifiertype . " = ?")) {        $clientlogstmt->bind_param("s", $identifier);         $clientlogstmt->execute();         $clientlogstmt->bind_result($usern_cl, $date_cl, $ip_cl, $hwid_cl, $computername_cl, $windowtitle_cl, $timezone_cl);        while ($clientlogstmt->fetch())         {            $clientgenlog = $clientgenlog . "USERNAME: " . $usern_cl . " DATE: " . $date_cl . " IP: " . Censor_Output($ip_cl, 2) . " HWID: " . $hwid_cl . " COMPUTERNAME: " . $computername_cl . " WINDOWTITLE: " . $windowtitle_cl . " TIMEZONE: " . $timezone_cl . "\r\n";        }    }        /* Website Login */    if ($identifiertype != "HWID" && $identifiertype != "WINDOWTITLE")    {        if ($clientlogstmt = $logdbconn->prepare("SELECT username, date, ip FROM WebsiteLogDB WHERE " . strtolower($identifiertype) . " = ?")) {            $clientlogstmt->bind_param("s", $identifier);             $clientlogstmt->execute();             $clientlogstmt->bind_result($usern_cl_2, $date_cl_2, $ip_cl_2);            while ($clientlogstmt->fetch())             {                $clientgenlog = $clientgenlog . "(WEBSITE) USERNAME: " . $usern_cl_2 . " DATE: " . $date_cl_2 . " IP: " . Censor_Output($ip_cl_2, 2) . "\r\n";            }        }    }        if ($clientgenlog == "")    {        $myObj->status = "bad";        $myObj->param = "No log database matches found for " . $identifier . ".";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();         }        $myObj->status = "good";    $myObj->param = $clientgenlog;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();     }if ($type == "gatherstafflogs"){    if ($clearance_level < SUPERVISOR)    {        $myObj->status = "bad";        $myObj->param = "You do not have to clearance to use this functionality.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();    }        $identifiertype = ($_POST['iden_type']);        if ($identifiertype != "username" && $identifiertype != "ip" && $identifiertype != "command"){        $myObj->status = "bad";        $myObj->param = "Incorrect lookup type. Lookup type must be either username, ip, or command.";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();     }        if ($identifiertype == "username")    {        while ($whitelist = mysqli_fetch_array($loop))            {                if ($identifier == $whitelist["username"])                {                                        if ($whitelist['accesslevel'] > $clearance_level)                    {                        $myObj->status = "bad";                        $myObj->param = "You do not have the clearance to look up " . $identifier . "'s account information.";                        $jsonoutput = json_encode($myObj);                        echo $jsonoutput;                        exit();                                    }                }            }     }        /* Fetch Client Logs */    $clientgenlog = "";        $logdbconn = new mysqli("localhost", AERO_DB_USERNAME, AERO_DB_PASSWORD, AERO_DB);        if($clientlogstmt = $logdbconn->prepare("SELECT username, ip, command, identifier FROM StaffLogDB WHERE " . $identifiertype . " = ?")) {        $clientlogstmt->bind_param("s", $identifier);         $clientlogstmt->execute();         $clientlogstmt->bind_result($usern_sld, $ip_std, $command_std, $identifier_std);        while ($clientlogstmt->fetch())         {            $clientgenlog = $clientgenlog . "USERNAME: " . $usern_sld . /*" IP: " . $ip_std .*/ " COMMAND: " . $command_std . " IDENTIFIER: " . $identifier_std . "\r\n";        }    }        if ($clientgenlog == "")    {        $myObj->status = "bad";        $myObj->param = "No log database matches found for " . $identifier . ".";        $jsonoutput = json_encode($myObj);        echo $jsonoutput;        exit();         }        LogStaffEvent($secusername, GetIP(), $type, $identifier);        $myObj->status = "good";    $myObj->param = $clientgenlog;    $jsonoutput = json_encode($myObj);    echo $jsonoutput;    exit();     }/* Unknown api call ??? */$myObj->status = "bad";$myObj->param = "Unknown api call type.";$jsonoutput = json_encode($myObj);echo $jsonoutput;exit(); ?>